import org.overlord.rtgov.activity.model.soa.RequestReceived
import org.overlord.rtgov.activity.model.soa.ResponseSent
import org.overlord.rtgov.activity.model.soa.RequestSent
import org.overlord.rtgov.activity.model.soa.ResponseReceived
import org.overlord.rtgov.analytics.situation.Situation
import org.jboss.rtgov.actvity.Util

global org.overlord.rtgov.ep.EPContext epc

declare RequestReceived
    @role( event )
    @expires( 40s )
    @timestamp(timestamp)

end

declare ResponseSent
    @role( event )
    @expires( 40s )
    @timestamp(timestamp)

end

rule "correlate request and response"
when
    $req : RequestReceived(  $id : properties["orderId"]   )   from entry-point "SOAEvents"
    not(ResponseSent( properties["orderId"]  == $id, this after[0s, 5s]  $req  ) from entry-point "SOAEvents")
then
          System.out.println("ARsGGGG "+$req.getMessageId()+ ", ");
         // over window:time(7d)
       //    not ResponseSent( replyToId == $req.messageId) over window:time(10s) from entry-point "SOAEvents"

   //           not ResponseSent( replyToId == $id, this after[1s,8s] $req )  from entry-point "SOAEvents"

	epc.logInfo("Service "+$req.getServiceType()+"has not responded within Agreed upon SLA of 8 seconds ");

              // Situation situation=   Util.createSituationRes($req);
               //  epc.handle(situation);
                //situation.setType("Unresponsive or slow Service ");
                 //    situation.setDescription("Service has not responded within Agreed upon SLA of 8 seconds " );
                   //    situation.setSeverity(Situation.Severity.Low);
                     //  epc.handle(situation);


                     //$req : RequestReceived( $id : properties["Conversation"]  )           from entry-point "RequestReceived"
                     //      $resp : ResponseSent( properties["Conversation"] == $id) from entry-point "ResponseSent"


end
